---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by lele.
--- DateTime: 07/02/24 17:48
---

---@class BirdPrey

local BirdPrey = {}

local bait = require("Bait_TS")
local trap = require("Trap_TS")
local zone = require("Zone_TS")

local debugDiagnostics = require("lib/DebugDiagnostics")

---@type int
local multiplierPrey

---@type int
local multiplierPreySize

local choicesPreys = {}

local function bait_TDD()
    --                  ** BAIT **
    ---@type int
    local expectedValueBread = 50 * multiplierPrey
    ---@type int
    local expectedValueBreadSlices = 50 * multiplierPrey
    ---@type int
    local expectedValueCereal = 45 * multiplierPrey
    ---@type int
    local expectedValueCockroach = 50 * multiplierPrey
    ---@type int
    local expectedValueCorn = 45 * multiplierPrey
    ---@type int
    local expectedValueCricket = 50 * multiplierPrey
    ---@type int
    local expectedValueGrasshopper = 50 * multiplierPrey
    ---@type int
    local expectedValueWorm = 50 * multiplierPrey

    ---@type int
    local currentValueBread = choicesPreys.baits[bait.bait.BREAD]
    ---@type int
    local currentValueBreadSlices = choicesPreys.baits[bait.bait.BREAD_SLICES]
    ---@type int
    local currentValueCereal = choicesPreys.baits[bait.bait.CEREAL]
    ---@type int
    local currentValueCockroach = choicesPreys.baits[bait.bait.COCKROACH]
    ---@type int
    local currentValueCorn = choicesPreys.baits[bait.bait.CORN]
    ---@type int
    local currentValueCricket = choicesPreys.baits[bait.bait.CRICKET]
    ---@type int
    local currentValueGrasshopper = choicesPreys.baits[bait.bait.GRASSHOPPER]
    ---@type int
    local currentValueWorm = choicesPreys.baits[bait.bait.WORM]

    debugDiagnostics.checkTest(expectedValueBread, currentValueBread, "Bird bait - " .. bait.bait.BREAD )
    debugDiagnostics.checkTest(expectedValueBreadSlices, currentValueBreadSlices, "Bird bait - " .. bait.bait.BREAD_SLICES )
    debugDiagnostics.checkTest(expectedValueCereal, currentValueCereal, "Bird bait - " .. bait.bait.CEREAL )
    debugDiagnostics.checkTest(expectedValueCockroach, currentValueCockroach, "Bird bait - " .. bait.bait.COCKROACH )
    debugDiagnostics.checkTest(expectedValueCorn, currentValueCorn, "Bird bait - " .. bait.bait.CORN )
    debugDiagnostics.checkTest(expectedValueCricket, currentValueCricket, "Bird bait - " .. bait.bait.CRICKET )
    debugDiagnostics.checkTest(expectedValueGrasshopper, currentValueGrasshopper, "Bird bait - " .. bait.bait.GRASSHOPPER )
    debugDiagnostics.checkTest(expectedValueWorm, currentValueWorm, "Bird bait - " .. bait.bait.WORM )

end

local function zone_TDD()
    --                  ** ZONE **
    ---@type int
    local expectedDeepForest = 20 * multiplierPrey
    ---@type int
    local expectedFarmLand = 35 * multiplierPrey
    ---@type int
    local expectedForest = 20 * multiplierPrey
    ---@type int
    local expectedTownZone = 30 * multiplierPrey
    ---@type int
    local expectedTrailerPark = 20 * multiplierPrey
    ---@type int
    local expectedVegetation = 30 * multiplierPrey

    ---@type int
    local currentDeepForest = choicesPreys.zone[zone.zone.DEEP_FOREST]
    ---@type int
    local currentFarmLand = choicesPreys.zone[zone.zone.FARM_LAND]
    ---@type int
    local currentForest = choicesPreys.zone[zone.zone.FOREST]
    ---@type int
    local currentTownZone = choicesPreys.zone[zone.zone.TOWN_ZONE]
    ---@type int
    local currentTrailerPark = choicesPreys.zone[zone.zone.TRAILER_PARK]
    ---@type int
    local currentVegetation = choicesPreys.zone[zone.zone.VEGETATION]

    debugDiagnostics.checkTest(expectedDeepForest, currentDeepForest, "Bird zone - " .. zone.zone.DEEP_FOREST)
    debugDiagnostics.checkTest(expectedFarmLand, currentFarmLand, "Bird zone - " .. zone.zone.FARM_LAND)
    debugDiagnostics.checkTest(expectedForest, currentForest, "Bird zone - " .. zone.zone.FOREST )
    debugDiagnostics.checkTest(expectedTownZone, currentTownZone, "Bird zone - " ..zone.zone.TOWN_ZONE)
    debugDiagnostics.checkTest(expectedTrailerPark, currentTrailerPark, "Bird zone - " .. zone.zone.TRAILER_PARK)
    debugDiagnostics.checkTest(expectedVegetation, currentVegetation, "Bird zone - " .. zone.zone.VEGETATION )

end

local function trap_TDD()
    ---@type int
    local expectedTrapStick = 40 * multiplierPrey

    ---@type int
    local currentTrapStick = choicesPreys.traps[trap.trap.TRAP_STICK]

    debugDiagnostics.checkTest(expectedTrapStick, currentTrapStick, "Bird trap - " .. trap.trap.TRAP_STICK)
end

local function multiplierPreySize_TDD()
    ---@type int
    local minSizePrey = 2
    ---@type int
    local maxSizePrey = 32

    ---@type int
    local expectedMinSize = minSizePrey * multiplierPreySize
    ---@type int
    local expectedMaxSize = maxSizePrey * multiplierPreySize

    ---@type int
    local currentMinSize = choicesPreys.minSize
    ---@type int
    local currentMaxSize = choicesPreys.maxSize

    debugDiagnostics.checkTest(expectedMinSize, currentMinSize, "Bird min Size Prey")
    debugDiagnostics.checkTest(expectedMaxSize, currentMaxSize, "Bird max Size Prey")
end

local function choicesPrey(prey)
    for i, v in pairs(Animals) do
        if v.type == prey then
            choicesPreys = v
            break
        end
    end
end

---@void
function BirdPrey.init()
    multiplierPrey = SandboxVars.TrappingSurvival.Bird
    multiplierPreySize = SandboxVars.TrappingSurvival.BirdSize

    choicesPrey("bird")

    bait_TDD()
    zone_TDD()
    trap_TDD()
    multiplierPreySize_TDD()
end

return BirdPrey