---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by lele.
--- DateTime: 10/02/24 10:01
---

---@class RatPrey

local RatPrey = {}

local bait = require("Bait_TS")
local trap = require("Trap_TS")
local zone = require("Zone_TS")

local debugDiagnostics = require("lib/DebugDiagnostics")

---@type int
local multiplierPrey

---@type int
local multiplierPreySize

local choicesPreys = {}

local function bait_TDD()
    --                  ** BAIT **
    ---@type int
    local expectedValueCheese = 60 * multiplierPrey
    ---@type int
    local expectedValueChocolate = 30 * multiplierPrey
    ---@type int
    local expectedValuePeanutButter = 40 * multiplierPrey
    ---@type int
    local expectedValueProcessedCheese = 55 * multiplierPrey
    ---@type int
    local expectedValueTomato = 35 * multiplierPrey

    ---@type int
    local currentValueCheese = choicesPreys.baits[bait.bait.CHEESE]
    ---@type int
    local currentValueChocolate = choicesPreys.baits[bait.bait.CHOCOLATE]
    ---@type int
    local currentValuePeanutButter = choicesPreys.baits[bait.bait.PEANUT_BUTTER]
    ---@type int
    local currentValueProcessedCheese = choicesPreys.baits[bait.bait.PROCESSED_CHEESE]
    ---@type int
    local currentValueTomato = choicesPreys.baits[bait.bait.TOMATO]

    debugDiagnostics.checkTest(expectedValueCheese, currentValueCheese, "Rat bait " .. bait.bait.CHEESE)
    debugDiagnostics.checkTest(expectedValueChocolate, currentValueChocolate, "Rat bait " .. bait.bait.CHOCOLATE)
    debugDiagnostics.checkTest(expectedValuePeanutButter, currentValuePeanutButter, "Rat bait " .. bait.bait.PEANUT_BUTTER)
    debugDiagnostics.checkTest(expectedValueProcessedCheese, currentValueProcessedCheese, "Rat bait " .. bait.bait.PROCESSED_CHEESE)
    debugDiagnostics.checkTest(expectedValueTomato, currentValueTomato, "Rat bait " .. bait.bait.TOMATO)
end

local function zone_TDD()
    ---@type int
    local expectedDeepForest = 10 * multiplierPrey
    ---@type int
    local expectedFarmLand = 50 * multiplierPrey
    ---@type int
    local expectedForest = 10 * multiplierPrey
    ---@type int
    local expectedTownZone = 30 * multiplierPrey
    ---@type int
    local expectedTrailerPark = 40 * multiplierPrey
    ---@type int
    local expectedVegetation = 20 * multiplierPrey

    ---@type int
    local currentValueDeepForest = choicesPreys.zone[zone.zone.DEEP_FOREST]

    ---@type int
    local currentValueFarmLand = choicesPreys.zone[zone.zone.FARM_LAND]
    ---@type int
    local currentValueForest = choicesPreys.zone[zone.zone.FOREST]
    ---@type int
    local currentValueTownZone = choicesPreys.zone[zone.zone.TOWN_ZONE]
    ---@type int
    local currentValueTrailerPark = choicesPreys.zone[zone.zone.TRAILER_PARK]
    ---@type int
    local currentValueVegetation = choicesPreys.zone[zone.zone.VEGETATION]

    debugDiagnostics.checkTest(expectedDeepForest, currentValueDeepForest, "Rat zone " .. zone.zone.DEEP_FOREST)
    debugDiagnostics.checkTest(expectedFarmLand, currentValueFarmLand, "Rat zone " .. zone.zone.FARM_LAND)
    debugDiagnostics.checkTest(expectedForest, currentValueForest, "Rat zone " .. zone.zone.FOREST)
    debugDiagnostics.checkTest(expectedTownZone, currentValueTownZone, "Rat zone " .. zone.zone.TOWN_ZONE)
    debugDiagnostics.checkTest(expectedTrailerPark, currentValueTrailerPark, "Rat zone " .. zone.zone.TRAILER_PARK)
    debugDiagnostics.checkTest(expectedVegetation, currentValueVegetation, "Rat zone " .. zone.zone.VEGETATION)
end

local function trap_TDD()
    ---@type int
    local expectedValueMouse = 25 * multiplierPrey

    ---@type int
    local currentValueMouse = choicesPreys.traps[trap.trap.MOUSE]

    debugDiagnostics.checkTest(expectedValueMouse, currentValueMouse, "Rat trap " .. trap.trap.MOUSE)
end

local function multiplierPreySize_TDD()
    ---@type int
    local minSizePrey = 5
    ---@type int
    local maxSizePrey = 25

    ---@type int
    local expectedMinSize = minSizePrey * multiplierPreySize
    ---@type int
    local expectedMaxSize = maxSizePrey * multiplierPreySize

    ---@type int
    local currentMinSize = choicesPreys.minSize
    ---@type int
    local currentMaxSize = choicesPreys.maxSize

    debugDiagnostics.checkTest(expectedMinSize, currentMinSize, "Rat minSizePrey")
    debugDiagnostics.checkTest(expectedMaxSize, currentMaxSize, "Rat maxSizePrey")
end

local function choicesPrey(prey)
    for i, v in pairs(Animals) do
        if v.type == prey then
            choicesPreys = v
            break
        end
    end
end

function RatPrey.init()
    multiplierPrey = SandboxVars.TrappingSurvival.Rat
    multiplierPreySize = SandboxVars.TrappingSurvival.RatSize

    choicesPrey("rat")

    bait_TDD()
    zone_TDD()
    trap_TDD()
    multiplierPreySize_TDD()
end

return RatPrey