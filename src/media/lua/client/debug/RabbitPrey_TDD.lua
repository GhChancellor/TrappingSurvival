---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by lele.
--- DateTime: 09/02/24 22:26
---

---@class RabbitPrey

local RabbitPrey = {}

local bait = require("Bait_TS")
local trap = require("Trap_TS")
local zone = require("Zone_TS")

local debugDiagnostics = require("lib/DebugDiagnostics")

---@type int
local multiplierPrey

---@type int
local multiplierPreySize

local choicesPreys = {}

local function bait_TDD()
    --                  ** BAIT **
    ---@type int
    local expectedValueApple = 35 * multiplierPrey
    ---@type int
    local expectedValueBanana = 35 * multiplierPrey
    ---@type int
    local expectedValueBellPepper = 40 * multiplierPrey
    ---@type int
    local expectedValueCabbage = 40 * multiplierPrey
    ---@type int
    local expectedValueCarrots = 45 * multiplierPrey
    ---@type int
    local expectedValueCorn = 35 * multiplierPrey
    ---@type int
    local expectedValueLettuce = 40 * multiplierPrey
    ---@type int
    local expectedValuePeach = 35 * multiplierPrey
    ---@type int
    local expectedValuePotato = 35 * multiplierPrey
    ---@type int
    local expectedValueTomato = 35 * multiplierPrey

    ---@type int
    local currentValueApple = choicesPreys.baits[bait.bait.APPLE]
    ---@type int
    local currentValueBanana = choicesPreys.baits[bait.bait.BANANA]
    ---@type int
    local currentValueBellPepper = choicesPreys.baits[bait.bait.BELL_PEPPER]
    ---@type int
    local currentValueCabbage = choicesPreys.baits[bait.bait.CABBAGE]
    ---@type int
    local currentValueCarrots = choicesPreys.baits[bait.bait.CARROTS]
    ---@type int
    local currentValueCorn = choicesPreys.baits[bait.bait.CORN]
    ---@type int
    local currentValueLettuce = choicesPreys.baits[bait.bait.LETTUCE]
    ---@type int
    local currentValuePeach = choicesPreys.baits[bait.bait.PEACH]
    ---@type int
    local currentValuePotato = choicesPreys.baits[bait.bait.POTATO]
    ---@type int
    local currentValueTomato = choicesPreys.baits[bait.bait.TOMATO]

    debugDiagnostics.checkTest(expectedValueApple, currentValueApple, "Rabbit bait - " .. bait.bait.APPLE)
    debugDiagnostics.checkTest(expectedValueBanana, currentValueBanana, "Rabbit bait - " .. bait.bait.BANANA)
    debugDiagnostics.checkTest(expectedValueBellPepper, currentValueBellPepper, "Rabbit bait - " .. bait.bait.BELL_PEPPER)
    debugDiagnostics.checkTest(expectedValueCabbage, currentValueCabbage, "Rabbit bait - " .. bait.bait.CABBAGE)
    debugDiagnostics.checkTest(expectedValueCarrots, currentValueCarrots, "Rabbit bait - " .. bait.bait.CARROTS)
    debugDiagnostics.checkTest(expectedValueCorn, currentValueCorn, "Rabbit bait - " .. bait.bait.CORN)
    debugDiagnostics.checkTest(expectedValueLettuce, currentValueLettuce, "Rabbit bait - " .. bait.bait.LETTUCE)
    debugDiagnostics.checkTest(expectedValuePeach, currentValuePeach, "Rabbit bait - " .. bait.bait.PEACH)
    debugDiagnostics.checkTest(expectedValuePotato, currentValuePotato, "Rabbit bait - " .. bait.bait.POTATO)
    debugDiagnostics.checkTest(expectedValueTomato, currentValueTomato, "Rabbit bait - " .. bait.bait.TOMATO)

end

local function zone_TDD()
    --                  ** ZONE **
    ---@type int
    local expectedDeepForest = 15 * multiplierPrey
    ---@type int
    local expectedForest = 12 * multiplierPrey
    ---@type int
    local expectedTownZone = 2 * multiplierPrey
    ---@type int
    local expectedTrailerPark = 2 * multiplierPrey
    ---@type int
    local expectedVegetation = 10 * multiplierPrey

    ---@type int
    local currentDeepForest = choicesPreys.zone[zone.zone.DEEP_FOREST]
    ---@type int
    local currentForest = choicesPreys.zone[zone.zone.FOREST]
    ---@type int
    local currentTownZone = choicesPreys.zone[zone.zone.TOWN_ZONE]
    ---@type int
    local currentTrailerPark = choicesPreys.zone[zone.zone.TRAILER_PARK]
    ---@type int
    local currentVegetation = choicesPreys.zone[zone.zone.VEGETATION]

    debugDiagnostics.checkTest(expectedDeepForest, currentDeepForest, "Rabbit zone - " .. zone.zone.DEEP_FOREST)
    debugDiagnostics.checkTest(expectedForest, currentForest, "Rabbit zone - " .. zone.zone.FOREST)
    debugDiagnostics.checkTest(expectedTownZone, currentTownZone, "Rabbit zone - " .. zone.zone.TOWN_ZONE)
    debugDiagnostics.checkTest(expectedTrailerPark, currentTrailerPark, "Rabbit zone - " .. zone.zone.TRAILER_PARK)
    debugDiagnostics.checkTest(expectedVegetation, currentVegetation, "Rabbit zone - " .. zone.zone.VEGETATION)

end

local function trap_TDD()
    --                  ** TRAP **
    ---@type int
    local expectedValueBox = 30 * multiplierPrey
    ---@type int
    local expectedValueCage = 40 * multiplierPrey
    ---@type int
    local expectedValueCrate = 30 * multiplierPrey
    ---@type int
    local expectedValueSnare = 30 * multiplierPrey

    ---@type int
    local currentValueBox = choicesPreys.traps[trap.trap.BOX]
    ---@type int
    local currentValueCage = choicesPreys.traps[trap.trap.CAGE]
    ---@type int
    local currentValueCrate = choicesPreys.traps[trap.trap.CRATE]
    ---@type int
    local currentValueSnare = choicesPreys.traps[trap.trap.SNARE]

    debugDiagnostics.checkTest(expectedValueBox, currentValueBox, "Rabbit trap - " .. trap.trap.BOX)
    debugDiagnostics.checkTest(expectedValueCage, currentValueCage, "Rabbit trap - " .. trap.trap.CAGE)
    debugDiagnostics.checkTest(expectedValueCrate, currentValueCrate, "Rabbit trap - " .. trap.trap.CRATE)
    debugDiagnostics.checkTest(expectedValueSnare, currentValueSnare, "Rabbit trap - " .. trap.trap.SNARE)
end

local function multiplierPreySize_TDD()
    ---@type int
    local minSizePrey = 30
    ---@type int
    local maxSizePrey = 100

    ---@type int
    local expectedMinSize = minSizePrey * multiplierPrey
    ---@type int
    local expectedMaxSize = maxSizePrey * multiplierPreySize

    ---@type int
    local currentMinSize = choicesPreys.minSize
    ---@type int
    local currentMaxSize = choicesPreys.maxSize

    debugDiagnostics.checkTest(expectedMinSize, currentMinSize, "Rabbit minSizePrey")
    debugDiagnostics.checkTest(expectedMaxSize, currentMaxSize, "Rabbit maxSizePrey")
end

local function choicesPrey(prey)
    for i, v in pairs(Animals) do
        if v.type == prey then
            choicesPreys = v
            break
        end
    end
end

function RabbitPrey.init()
    multiplierPrey = SandboxVars.TrappingSurvival.Rabbit
    multiplierPreySize = SandboxVars.TrappingSurvival.RabbitSize

    choicesPrey("rabbit")

    bait_TDD()
    trap_TDD()
    zone_TDD()
    multiplierPreySize_TDD()

end

return RabbitPrey