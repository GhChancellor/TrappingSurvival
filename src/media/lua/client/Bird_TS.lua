---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by lele.
--- DateTime: 13/08/23 23:14
---

-- https://pzwiki.net/wiki/Trapping
-- SteamLibrary/steamapps/common/ProjectZomboid/projectzomboid/media/lua/server/Traps/TrapDefinition.lua

---@class Bird

local creatureFactory = require("CreatureFactory")
local dataValidator = require("lib/DataValidator")
local errHandler = require("lib/ErrHandler")

--- **This is a class**
local Bird = {}

--- **This is an animal with its properties**
-- @type table
local bird = {}

local bait = require("Bait_TS")
local trap = require("Trap_TS")
local zone = require("Zone_TS")

--- ---------------------- Start Bird Default values -------------------------------

--                  ** BAIT **
---@type int
local bread = 50
---@type int
local breadSlices = 50
---@type int
local cereal = 45
---@type int
local cockroach = 50
---@type int
local corn = 45
---@type int
local cricket = 50
---@type int
local grasshopper = 50
---@type int
local worm = 50


--                  ** ZONE **
---@type int
local deepForest = 20
---@type int
local farmLand = 35
---@type int
local forest = 20
---@type int
local townZone = 30
---@type int
local trailerPark = 20
---@type int
local vegetation = 30


--                  ** TRAP **
---@type int
local trapStick = 40

--                  ** ANIMALS **
--- **Type of animal**
---@type int
local type = "bird"

--- **After how many hour the animal will start to destroy the cage/escape**
---@type int
local strength = 24

--- **Item given to the player**
---@type string
local item = "Base.DeadBird"

--- **Hour this animal will be out and when you can catch it**
---@type int
local minHour = 0

--- **Hour this animal will be out and when you can catch it**
---@type int
local maxHour = 0

--- **Min and max "size" (understand hunger reduction) of the animal**
---@type int
local minSizePrey = 2

--- **Min and max "size" (understand hunger reduction) of the animal**
---@type int
local maxSizePrey = 32

--- ---------------------- Set Multiplier -------------------

--- **Set Bait Multiplier**
---@param multiplierPrey int
---@return void
local function setBaitMultiplier(multiplierPrey)
    if not dataValidator.isNumber(multiplierPrey) then
        errHandler.errMsg("Bird - setBaitMultiplier(multiplierPrey)",
                "multiplierPrey " .. errHandler.err.IS_NOT_INT)
        return nil
    end

    bait.setBread( bread * multiplierPrey)
    bait.setBreadSlices( breadSlices * multiplierPrey)
    bait.setCereal( cereal * multiplierPrey)
    bait.setCockroach( cockroach * multiplierPrey)
    bait.setCorn( corn * multiplierPrey)
    bait.setCricket( cricket * multiplierPrey)
    bait.setGrasshopper( grasshopper * multiplierPrey)
    bait.setWorm( worm * multiplierPrey)
end

--- **Set Trap Multiplier**
---@param multiplierPrey int
---@return void
local function setTrapMultiplier(multiplierPrey)
    if not dataValidator.isNumber(multiplierPrey) then
        errHandler.errMsg("Bird - setTrapMultiplier(multiplierPrey)",
                "multiplierPrey " .. errHandler.err.IS_NOT_INT)
        return nil
    end

    trap.setTrapStick( trapStick * multiplierPrey)
end

--- **Set Zone Multiplier**
---@param multiplierPrey int
---@return void
local function setZoneMultiplier(multiplierPrey)
    if not dataValidator.isNumber(multiplierPrey) then
        errHandler.errMsg("Bird - setZoneMultiplier(multiplierPrey)",
                "multiplierPrey " .. errHandler.err.IS_NOT_INT)
        return nil
    end

    zone.setDeepForest( deepForest * multiplierPrey)
    zone.setFarmLand(farmLand * multiplierPrey)
    zone.setForest(forest * multiplierPrey)
    zone.setTownZone(townZone * multiplierPrey)
    zone.setTrailerPark(trailerPark * multiplierPrey)
    zone.setVegetation(vegetation * multiplierPrey)
end

--- **Set "size" Multiplier**
--- - Min and max "size" (understand hunger reduction) of the animal
---@param multiplierPreySize int
---@return void
local function setMultiplierPreySize(multiplierPreySize)
    if not dataValidator.isNumber(multiplierPreySize) then
        errHandler.errMsg("Bird - setMultiplierPreySize(multiplierPreySize)",
                "multiplierPreySize " .. errHandler.err.IS_NOT_INT)
        return nil
    end

    bird.minSize = minSizePrey * multiplierPreySize;
    bird.maxSize = maxSizePrey * multiplierPreySize;
end

--- ---------------------- Start init Bait -------------------

--- **Init Bait**
---@type void
local function initBait()
    creatureFactory.createBait(bird.baits, bait.bait.BREAD, bait.getBread())
    creatureFactory.createBait(bird.baits, bait.bait.BREAD_SLICES, bait.getBreadSlices())
    creatureFactory.createBait(bird.baits, bait.bait.CEREAL, bait.getCereal())
    creatureFactory.createBait(bird.baits, bait.bait.COCKROACH, bait.getCockroach())
    creatureFactory.createBait(bird.baits, bait.bait.CORN, bait.getCorn())
    creatureFactory.createBait(bird.baits, bait.bait.CRICKET, bait.getCricket())
    creatureFactory.createBait(bird.baits, bait.bait.GRASSHOPPER, bait.getGrasshopper())
    creatureFactory.createBait(bird.baits, bait.bait.WORM, bait.getWorm())
end

--- **Init Trap**
---@type void
local function initTrap()
    creatureFactory.createTrap(bird.traps, trap.trap.TRAP_STICK, trap.getTrapStick())
end

--- **Init Zone**
---@type void
local function initZone()
    creatureFactory.createZone(bird.zone, zone.zone.DEEP_FOREST, zone.getDeepForest())
    creatureFactory.createZone(bird.zone, zone.zone.FARM_LAND, zone.getFarmLand())
    creatureFactory.createZone(bird.zone, zone.zone.FOREST, zone.getForest())
    creatureFactory.createZone(bird.zone, zone.zone.TOWN_ZONE, zone.getTownZone())
    creatureFactory.createZone(bird.zone, zone.zone.TRAILER_PARK, zone.getTrailerPark())
    creatureFactory.createZone(bird.zone, zone.zone.VEGETATION, zone.getVegetation())
end

--- **Init**
---@type void
local function init()
    ---@type int
    local multiplierPrey = SandboxVars.TrappingSurvival.Bird

    ---@type int
    local multiplierPreySize = SandboxVars.TrappingSurvival.BirdSize

    if not dataValidator.isNumber(multiplierPrey) then
        errHandler.errMsg("Bird - init()",
                "multiplierPrey " .. errHandler.err.IS_NOT_INT)
            return nil
    elseif not dataValidator.isNumber(multiplierPreySize) then
            errHandler.errMsg("Bird - init()",
                    "multiplierPreySize " .. errHandler.err.IS_NOT_INT)
        return nil
    end

    bird = creatureFactory.creature(type, strength, item, minSizePrey, maxSizePrey, minHour, maxHour)

    --                  ** MULTIPLIER **
    setBaitMultiplier(multiplierPrey)
    setTrapMultiplier(multiplierPrey)
    setZoneMultiplier(multiplierPrey)
    setMultiplierPreySize(multiplierPreySize)

    --                  ** Init bait/trap/zone **
    initBait()
    initTrap()
    initZone()
end

---**Get Bird**
---@return table Bird
function Bird.getBird()
    init()
    return bird
end

return Bird
