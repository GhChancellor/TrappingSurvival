---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by lele.
--- DateTime: 13/08/23 23:14
---

-- https://pzwiki.net/wiki/Trapping
-- SteamLibrary/steamapps/common/ProjectZomboid/projectzomboid/media/lua/server/Traps/TrapDefinition.lua

---@class Rabbit

--- ---------------------- Start Rabbit Default values -------------------------------

local creatureFactory = require("CreatureFactory")
local dataValidator = require("lib/DataValidator")
local errHandler = require("lib/ErrHandler")

---@type table
local rabbit = {}

local trap = require("Trap")
local bait = require("Bait")
local zone = require("Zone")

--                  ** BAIT **
---@type int
local apple = 35
---@type int
local banana = 35
---@type int
local bellPepper = 40
---@type int
local cabbage = 40
---@type int
local carrots = 45
---@type int
local corn = 35
---@type int
local lettuce = 40
---@type int
local peach = 35
---@type int
local potato = 35
---@type int
local tomato = 35

--                  ** ZONE **
---@type int
local deepForest = 15
---@type int
local forest = 12
---@type int
local townZone = 2
---@type int
local trailerPark = 2
---@type int
local vegetation = 10

--                  ** TRAP **
---@type int
local trapBox = 30
---@type int
local trapCage = 40
---@type int
local trapCrate = 30
---@type int
local trapSnare = 30

--                  ** ANIMALS **
--- **Type of animal**
---@type string
local type = "rabbit"

--- **After how many hour the animal will start to destroy the cage/escape**
---@type int
local strength = 24

--- **Item given to the player**
---@type string
local item = "Base.DeadRabbit"

--- **Hour this animal will be out and when you can catch it**
---@type int
local minHour = 18

--- **Hour this animal will be out and when you can catch it**
---@type int
local maxHour = 8

--- **Min and max "size" (understand hunger reduction) of the animal**
---@type int
local minSizePrey = 30

--- **Min and max "size" (understand hunger reduction) of the animal**
---@type int
local maxSizePrey = 100

--- ---------------------- Set Multiplier -------------------

--- **Set Bait Multiplier**
---@param multiplierPrey int
local function setBaitMultiplier(multiplierPrey)
    if not dataValidator.isNumber(multiplierPrey) then
        errHandler.errMsg("Rabbit - setBaitMultiplier(multiplierPrey)",
                "multiplierPrey " .. errHandler.err.IS_NOT_INT)
        return nil
    end

    bait.setApple(apple * multiplierPrey)
    bait.setBanana(banana * multiplierPrey)
    bait.setBellPepper(bellPepper * multiplierPrey)
    bait.setCabbage(cabbage * multiplierPrey)
    bait.setCarrots(carrots * multiplierPrey)
    bait.setCorn(corn * multiplierPrey)
    bait.setLettuce(lettuce * multiplierPrey)
    bait.setPeach(peach * multiplierPrey)
    bait.setPotato(potato * multiplierPrey)
    bait.setTomato(tomato * multiplierPrey)
end

--- **Set Trap Multiplier**
---@param multiplierPrey int
local function setTrapMultiplier(multiplierPrey)
    if not dataValidator.isNumber(multiplierPrey) then
        errHandler.errMsg("Rabbit - setTrapMultiplier(multiplierPrey)",
                "multiplierPrey " .. errHandler.err.IS_NOT_INT)
        return nil
    end

    trap.setTrapBox(trapBox * multiplierPrey)
    trap.setTrapCage(trapCage * multiplierPrey)
    trap.setTrapCrate(trapCrate * multiplierPrey)
    trap.setTrapSnare(trapSnare * multiplierPrey)
end

--- **Set Zone Multiplier**
---@param multiplierPrey int
local function setZoneMultiplier(multiplierPrey)
    if not dataValidator.isNumber(multiplierPrey) then
        errHandler.errMsg("Rabbit - setZoneMultiplier(multiplierPrey)",
                "multiplierPrey " .. errHandler.err.IS_NOT_INT)
        return nil
    end

    zone.setDeepForest( deepForest * multiplierPrey)
    zone.setForest(forest * multiplierPrey)
    zone.setTownZone(townZone * multiplierPrey)
    zone.setTrailerPark(trailerPark * multiplierPrey)
    zone.setVegetation(vegetation * multiplierPrey)
end

--- **Set "size" Multiplier**
--- Min and max "size" (understand hunger reduction) of the animal
---@param multiplierPreySize int
local function setSizeAnimalMultiplier(multiplierPreySize)
    if not dataValidator.isNumber(multiplierPreySize) then
        errHandler.errMsg("Rabbit - setSizeAnimalMultiplier(multiplierPreySize)",
                "multiplierPreySize " .. errHandler.err.IS_NOT_INT)
        return nil
    end

    rabbit.minSize = minSizePrey * multiplierPreySize;
    rabbit.maxSize = maxSizePrey * multiplierPreySize;
end

--- ---------------------- Start init Bait -------------------

--- **Init Bait**
local function initBait()
    creatureFactory.createBait(rabbit, bait.bait.APPLE, bait.getApple())
    creatureFactory.createBait(rabbit, bait.bait.BANANA, bait.getBanana())
    creatureFactory.createBait(rabbit, bait.bait.BELL_PEPPER, bait.getBellPepper())
    creatureFactory.createBait(rabbit, bait.bait.CABBAGE, bait.getCabbage())
    creatureFactory.createBait(rabbit, bait.bait.CARROTS, bait.getCarrots())
    creatureFactory.createBait(rabbit, bait.bait.CORN, bait.getCorn())
    creatureFactory.createBait(rabbit, bait.bait.LETTUCE, bait.getLettuce())
    creatureFactory.createBait(rabbit, bait.bait.PEACH, bait.getPeach())
    creatureFactory.createBait(rabbit, bait.bait.POTATO, bait.getPotato())
    creatureFactory.createBait(rabbit, bait.bait.TOMATO, bait.getTomato())
end

--- **Init Trap**
local function initTrap()
    creatureFactory.createTrap(rabbit, trap.trap.BOX, trap.getTrapBox())
    creatureFactory.createTrap(rabbit, trap.trap.CAGE, trap.getTrapCage())
    creatureFactory.createTrap(rabbit, trap.trap.CRATE, trap.getTrapCrate())
    creatureFactory.createTrap(rabbit, trap.trap.SNARE, trap.getTrapSnare())
end

--- **Init Zone**
local function initZone()
    creatureFactory.createZone(rabbit, zone.zone.DEEP_FOREST, zone.getDeepForest())
    creatureFactory.createZone(rabbit, zone.zone.FOREST, zone.getForest())
    creatureFactory.createZone(rabbit, zone.zone.TOWN_ZONE, zone.getTownZone())
    creatureFactory.createZone(rabbit, zone.zone.TRAILER_PARK, zone.getTrailerPark())
    creatureFactory.createZone(rabbit, zone.zone.VEGETATION, zone.getVegetation())
end

--- **Init**
local function init()
    ---@type int
    local multiplierPrey = SandboxVars.TrappingSurvival.Rabbit

    ---@type int
    local multiplierPreySize = SandboxVars.TrappingSurvival.RabbitSize


    if not dataValidator.isNumber(multiplierPrey) then
        errHandler.errMsg("Rabbit - init()",
                "multiplierPrey " .. errHandler.err.IS_NOT_INT)
        return nil
    elseif not dataValidator.isNumber(multiplierPreySize) then
        errHandler.errMsg("Rabbit - init()",
                "multiplierPreySize " .. errHandler.err.IS_NOT_INT)
        return nil
    end

    rabbit = creatureFactory.creature(type, strength, item, minSizePrey, maxSizePrey, minHour, maxHour)

    --                  ** MULTIPLIER **
    setBaitMultiplier(multiplierPrey)
    setTrapMultiplier(multiplierPrey)
    setZoneMultiplier(multiplierPrey)
    setSizeAnimalMultiplier(multiplierPreySize)

    --                  ** Init bait/trap/zone **
    initBait()
    initTrap()
    initZone()
end

---**Get Rabbit**
---@return table Rabbit
function getRabbit()
    init()
    return rabbit
end
